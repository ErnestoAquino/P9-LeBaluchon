//
//  CurrencyConverterService.swift
//  LeBaluchon
//
//  Created by Ernesto Elias on 25/04/2022.
//

import Foundation

final class CurrencyConverterService {

    weak var viewDelegate: CurrencyConverterDelegate?
    private let apiKey = Bundle.main.object(forInfoDictionaryKey: "API_KEY") as? String
    private let urlBase = "http://data.fixer.io/api/latest"
    private let message = "We have un little problem, please check your internet connection."
    private (set) var exchangeRateLocal: ExchangeRate?
    private (set) var checkResult = ""
    private var euros: String?
    public var currency: Currency = .USD
    private let session: URLSessionProtocol

    enum Currency: String {
        case USD
        case MXN
        case JPY
        case GBP
    }

    init(_ session: URLSessionProtocol) {
        self.session = session
    }

    /**
     This function performs the conversion.
     It indicates the result to the controller using the function refreshTextView.
     
     - parameter eurosToBeConverted: Optional string with the euros to be converted.
     */
    public func doConversion(eurosToBeConverted: String?) {
        guard stringWithEurosIsValid(eurosToBeConverted) else {
            warningMessage("Please enter a valid amount (greater than 0 and less than 1 000 000).")
            return
        }
        euros = eurosToBeConverted
        guard exchangeRateLocal != nil else {
            obtainExchangeRateForFirstTime()
            return
        }
        let result = calculateConversion(euros: eurosToBeConverted, exchangeData: exchangeRateLocal)
        checkResult = result
        refreshTextViewWithValue(result)
    }

    /**
     This function retrieves the current exchange rate information from the FIXER API and stores it in the variable "exchangeRateLocal " if it is empty.
     */
    private func obtainExchangeRateForFirstTime() {
        let networkManager = NetworkManager<ExchangeRate>(networkManagerSession: session)
        let request = createRequest()
        toogleActivityIndicator(shown: true)
        networkManager.getInformation(request: request) { exchangeRate, error in
            self.toogleActivityIndicator(shown: false)
            guard error == nil,
                  let exchangeRate = exchangeRate else {
                self.warningMessage(self.message)
                return
            }
            self.exchangeRateLocal = exchangeRate
            let result = self.calculateConversion(euros: self.euros, exchangeData: exchangeRate)
            self.checkResult = result
            self.refreshTextViewWithValue(result)
        }
    }

    /**
     This function does the conversion calculation. It recovers the value of euros and the value of the currency selected in the "currency" variable.
     
     - parameter euros:        Optional string with the euros to convert
     - parameter exchangeData: Structure with the exchange rate.
     
     - returns: Returns the result of the conversion as a string
     */
    private func calculateConversion(euros: String?, exchangeData: ExchangeRate?) -> String {
        var conversionResult = -0.0
//        guard exchangeRate = exchangeData else { return }
        guard let euros = euros,
              let eurosHowDouble = Double(euros),
              let value = exchangeData?.rates?[currency.rawValue] else {
            return String(conversionResult)
        }
        conversionResult = eurosHowDouble * value
        return String(conversionResult)
    }

    /**
     This function receives an optional string as a parameter and checks if it can be converted to a double type.
     
     - parameter value: The optional string to be verified.
     
     - returns: If value can be converted to double and if it is between 1 - 999 999 returns true.
     */
    private func stringWithEurosIsValid(_ value: String?) -> Bool {
        guard let value = value,
              let valueHowDouble = Double(value),
              valueHowDouble > 0,
              valueHowDouble < 1000000 else {return false}
        return true
    }

    /**
     This function recovers the url generated by the createURL() function, and builds an instance of URL Request.
     
     - returns: Returns an instance of URL Request with GET method.
     */
    private func createRequest() -> URLRequest {
        let url = createURL()
        var request = URLRequest(url: url)
        request.httpMethod = "GET"

        return request
    }

    /**
     This function constructs a url using the API key.
     
     - returns: Returns a non-optional url.
     */
    private func createURL() -> URL {
        let key = getApiKey()
        let urlWithKey = "\(urlBase)?access_key=\(key)&base=EUR&symbols=USD,MXN,JPY,GBP"
        guard let url = URL(string: urlWithKey) else {
            return URL(string: "")!
        }
        return url
    }

    /**
     This function retrieves the key for the API Currency Service.
     
     - returns: Returns the unwrapped key as String.
     */
    private func getApiKey() -> String {
        guard let apiKey = apiKey else {
            return ""
        }
        return apiKey
    }
}
